页面名称：fibonacci-sequence
创建者：已删号
标签：知识 转载
------
[[>]]
[[module rate]]
[[/>]]
Java代码实现：
[[code type="Java"]]
/**
* 平推方法实现
*/
public static long fibLoop(int num) {
    if(num < 1 || num > 92)
        return 0;
    long a = 1;
    long b = 1;
    long temp;
    for(int i = 2; i < num; i++) {
        temp = a;
        a = b;
        b += temp;
    }
    return b;
}
[[/code]]
JavaScript代码实现：
[[code type="JavaScript"]]
//循环算法
function f(n){
  if(n == 0){
    return 0;
  }else if(n ==1){
  return 1;
  }else{
    var fn1 = 0;
    var fn2 = 1;
    var fnx = 0;
    for(var i=0;i<n-1; i++){
      var newfn1 = fn2;
      fnx = fn1 + fn2;
      fn1 = fn2;
      fn2 = fnx;
  }
    return fnx;
  }
[[/code]]
C++代码实现：
[[code type="Cpp"]]
//基本循环算法
#include<bits/stdc++.h>
using namespace std;
int main()
{
    int a=0,b=0,c=1,n;
    cin>>n;//输入n
    for(int i=1;i<=n-1;i++)
    {
        a=b;
        b=c;
        c=a+b;
    }
    cout<<c;//输出最终结果
    return 0;
}
[[/code]]

C#代码实现
[[code]]
using System;
class 测试
{
    static void Main(string[] args)
    {
        int N = 50;
        //由于数字太大，我只能用计算金融的decimal来作为类型
        decimal[] feiBo = new decimal[N];  //定义数组
        feiBo[0] = 1;    //C#数组从0开始！！！！
        feiBo[1] = 1;    //定义了前两项
        //while 循环，计算数组斐波那契数列的每一项
        int x = 2;
        while (x <= N - 1)
        {
            feiBo[x] = feiBo[x - 1] + feiBo[x - 2];
            x++;
        }
        //foreach遍历数组，具体用法请百度，这里不再赘述。
        foreach (decimal i in feiBo)
        {
            Console.WriteLine(i);
        }
        Console.ReadKey();
    }
}
[[/code]]

+ 讨论区

[[module comments]]